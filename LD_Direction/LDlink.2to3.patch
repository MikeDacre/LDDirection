--- LDlink.py	(original)
+++ LDlink.py	(refactored)
@@ -8,7 +8,7 @@
 import shutil
 import os
 import traceback
-import urllib
+import urllib.request, urllib.parse, urllib.error
 import collections
 import argparse
 import json
@@ -85,7 +85,7 @@
     else:
         custom["error"] = error
 
-    print "Unexpected error:", sys.exc_info()[0]
+    print("Unexpected error:", sys.exc_info()[0])
     traceback.print_exc()
     custom["error"] = "Raised when a generated error does not fall into any category."
     custom["traceback"] = traceback.format_exc()
@@ -101,16 +101,16 @@
 @app.route('/LDlinkRest/upload', methods=['POST'])
 def upload():
 
-    print "Processing upload"
-    print "****** Stage 1: UPLOAD BUTTON ***** "
-    print "UPLOAD_DIR = %s" % (app.config['UPLOAD_DIR'])
+    print("Processing upload")
+    print("****** Stage 1: UPLOAD BUTTON ***** ")
+    print("UPLOAD_DIR = %s" % (app.config['UPLOAD_DIR']))
     for arg in request.args:
-        print arg
-
-    print "request.method = %s" % (request.method)
+        print(arg)
+
+    print("request.method = %s" % (request.method))
     if request.method == 'POST':
         # check if the post request has the file part
-        print " We got a POST"
+        print(" We got a POST")
         # print dir(request.files)
         if 'ldassocFile' not in request.files:
             print('No file part')
@@ -120,16 +120,16 @@
 
         # if user does not select file, browser also
         # submit a empty part without filename
-        print type(file)
+        print(type(file))
         if file.filename == '':
             print('No selected file')
             return 'No selected file'
         if file:
-            print 'file.filename ' + file.filename
+            print('file.filename ' + file.filename)
             print('file and allowed_file')
             filename = secure_filename(file.filename)
-            print "About to SAVE file"
-            print "filename = " + filename
+            print("About to SAVE file")
+            print("filename = " + filename)
             file.save(os.path.join(app.config['UPLOAD_DIR'], filename))
             return 'File was saved'
     #        print "FILE SAVED.  Alright!"
@@ -143,20 +143,20 @@
 
 @app.route("/LDlinkRest/demoapp/add", methods=['POST'])
 def restAdd():
-    print type(request.args)
+    print(type(request.args))
     for arg in request.args:
-        print arg
+        print(arg)
 
     data = str(request.args)
     json_dumps = json.dumps(data)
 
-    print "HI"
+    print("HI")
     first = request.args.get('first', False)
     second = request.form.get('second')
     test = request.form.get('test')
-    print "Hi"
-    print first
-    print json_dumps
+    print("Hi")
+    print(first)
+    print(json_dumps)
     return jsonify(success=True, data=json_dumps)
 
 
@@ -167,8 +167,8 @@
     # r1 = '{"corr_alleles":["rs2720460(A) allele is correlated with rs11733615(C) allele","rs2720460(G) allele is correlated with rs11733615(T) allele"],"haplotypes":{"hap1":{"alleles":"AC","count":"576","frequency":"0.573"},"hap2":{"alleles":"GT","count":"361","frequency":"0.359"},"hap3":{"alleles":"GC","count":"42","frequency":"0.042"},"hap4":{"alleles":"AT","count":"27","frequency":"0.027"}},"snp1":{"allele_1":{"allele":"A","count":"603","frequency":"0.599"},"allele_2":{"allele":"G","count":"403","frequency":"0.401"},"coord":"chr4:104054686","rsnum":"rs2720460"},"snp2":{"allele_1":{"allele":"C","count":"618","frequency":"0.614"},"allele_2":{"allele":"T","count":"388","frequency":"0.386"},"coord":"chr4:104157164","rsnum":"rs11733615"},"statistics":{"chisq":"738.354","d_prime":"0.8839","p":"0.0","r2":"0.734"},"two_by_two":{"cells":{"11":"576","12":"27","21":"42","22":"361"},"total":"1006"}'
 
     isProgrammatic = False
-    print 'Execute TEST'
-    print 'Gathering Variables from url'
+    print('Execute TEST')
+    print('Gathering Variables from url')
     var1 = request.args.get('var1', False)
     var2 = request.args.get('var2', False)
     pop = request.args.get('pop', False)
@@ -179,10 +179,10 @@
         reference = str(time.strftime("%I%M%S"))
         isProgrammatic = True
 
-    print 'var1: ' + var1
-    print 'var2: ' + var2
-    print 'pop: ' + pop
-    print 'request: ' + str(reference)
+    print('var1: ' + var1)
+    print('var2: ' + var2)
+    print('pop: ' + pop)
+    print('request: ' + str(reference))
 
     try:
         out_json = calculate_pair(var1, var2, pop, reference)
@@ -201,15 +201,15 @@
 @app.route('/LDlinkRest/ldproxy', methods=['GET'])
 def ldproxy():
     isProgrammatic = False
-    print 'Execute ldproxy'
-    print 'Gathering Variables from url'
+    print('Execute ldproxy')
+    print('Gathering Variables from url')
     var = request.args.get('var', False)
     pop = request.args.get('pop', False)
     r2_d = request.args.get('r2_d', False)
 
-    print 'var: ' + var
-    print 'pop: ' + pop
-    print 'r2_d: ' + r2_d
+    print('var: ' + var)
+    print('pop: ' + pop)
+    print('r2_d: ' + r2_d)
 
     if request.args.get('reference', False):
         reference = request.args.get('reference', False)
@@ -234,8 +234,8 @@
 def ldmatrix():
 
     isProgrammatic = False
-    print 'Execute ldmatrix'
-    print 'Gathering Variables from url'
+    print('Execute ldmatrix')
+    print('Gathering Variables from url')
 
     snps = request.args.get('snps', False)
     pop = request.args.get('pop', False)
@@ -247,13 +247,13 @@
         isProgrammatic = True
 
     r2_d = request.args.get('r2_d', False)
-    print 'snps: ' + snps
-    print 'pop: ' + pop
-    print 'request: ' + str(reference)
-    print 'r2_d: ' + r2_d
+    print('snps: ' + snps)
+    print('pop: ' + pop)
+    print('request: ' + str(reference))
+    print('r2_d: ' + r2_d)
 
     snplst = tmp_dir + 'snps' + str(reference) + '.txt'
-    print 'snplst: ' + snplst
+    print('snplst: ' + snplst)
 
     f = open(snplst, 'w')
     f.write(snps)
@@ -283,9 +283,9 @@
 @app.route('/LDlinkRest/ldhap', methods=['GET'])
 def ldhap():
     isProgrammatic = False
-    print 'Execute ldhap'
-    print 'working'
-    print 'Gathering Variables from url'
+    print('Execute ldhap')
+    print('working')
+    print('Gathering Variables from url')
 
     snps = request.args.get('snps', False)
     pop = request.args.get('pop', False)
@@ -296,15 +296,15 @@
         reference = str(time.strftime("%I%M%S"))
         isProgrammatic = True
 
-    print 'snps: ' + snps
-    print 'pop: ' + pop
-    print 'request: ' + str(reference)
+    print('snps: ' + snps)
+    print('pop: ' + pop)
+    print('request: ' + str(reference))
 
     if reference is False:
         reference = str(time.strftime("%I%M%S"))
 
     snplst = tmp_dir + 'snps' + reference + '.txt'
-    print 'snplst: ' + snplst
+    print('snplst: ' + snplst)
 
     f = open(snplst, 'w')
     f.write(snps)
@@ -340,13 +340,13 @@
     # [ncianalysis@nciws-d275-v LDlinkc]$ python ./SNPclip.py LDlink-rs-numbers.txt YRI 333
     mimetype = 'application/json'
     data = json.loads(request.stream.read())
-    print 'Execute snpclip'
+    print('Execute snpclip')
     snps = data['snps']
     pop = data['pop']
     r2_threshold = data['r2_threshold']
     maf_threshold = data['maf_threshold']
 
-    if 'reference' in data.keys():
+    if 'reference' in list(data.keys()):
         reference = str(data['reference'])
     else:
         reference = str(time.strftime("%I%M%S"))
@@ -384,35 +384,35 @@
         json_dict["error"]
     except KeyError:
         # print ""
-        print "LD Thinned SNP list (" + pop + "):"
+        print("LD Thinned SNP list (" + pop + "):")
         for snp in snp_list:
-            print snp
-
-        print "The snps.."
+            print(snp)
+
+        print("The snps..")
         for snp in snps:
-            print snp
-
-        print ""
-        print "RS Number\tPosition\tAlleles\tDetails"
+            print(snp)
+
+        print("")
+        print("RS Number\tPosition\tAlleles\tDetails")
         for snp in snps:
-            print snp[0] + "\t" + "\t".join(details[snp[0]])
+            print(snp[0] + "\t" + "\t".join(details[snp[0]]))
             clip["filtered"][snp[0]] = details[snp[0]]
 
         try:
             json_dict["warning"]
 
         except KeyError:
-            print ""
+            print("")
         else:
-            print ""
-            print "WARNING: " + json_dict["warning"] + "!"
-            print ""
+            print("")
+            print("WARNING: " + json_dict["warning"] + "!")
+            print("")
             clip["warning"] = json_dict["warning"]
 
     else:
-        print ""
-        print json_dict["error"]
-        print ""
+        print("")
+        print(json_dict["error"])
+        print("")
         clip["error"] = json_dict["error"]
 
     # SNP List file
@@ -451,13 +451,13 @@
 
     # Command line example
     isProgrammatic = False
-    print "snpChip"
+    print("snpChip")
 
     data = json.loads(request.stream.read())
     snps = data['snps']
     platforms = data['platforms']
 
-    if 'reference' in data.keys():
+    if 'reference' in list(data.keys()):
         reference = str(data['reference'])
     else:
         reference = str(time.strftime("%I%M%S"))
@@ -466,12 +466,12 @@
     #snps = request.args.get('snps', False)
     #platforms = request.args.get('platforms', False)
     #reference = request.args.get('reference', False)
-    print 'snps: ' + snps
-    print 'platforms: ' + platforms
-    print 'request: ' + reference
+    print('snps: ' + snps)
+    print('platforms: ' + platforms)
+    print('request: ' + reference)
 
     snplst = tmp_dir + 'snps' + reference + '.txt'
-    print 'snplst: ' + snplst
+    print('snplst: ' + snplst)
 
     f = open(snplst, 'w')
     f.write(snps)
@@ -501,7 +501,7 @@
 
 @app.route('/LDlinkRest/snpchip_platforms', methods=['GET'])
 def snpchip_platforms():
-    print "Retrieve SNPchip Platforms"
+    print("Retrieve SNPchip Platforms")
     return get_platform_request()
 
 
@@ -511,12 +511,12 @@
     myargs = argparse.Namespace()
     myargs.window = None
 
-    print "LDassoc"
-    print 'Gathering Variables from url'
-
-    print type(request.args)
+    print("LDassoc")
+    print('Gathering Variables from url')
+
+    print(type(request.args))
     for arg in request.args:
-        print arg
+        print(arg)
 
     data = str(request.args)
     json_dumps = json.dumps(data)
@@ -533,15 +533,15 @@
     region = request.args.get('calculateRegion')
 
     myargs.dprime = bool(request.args.get("dprime") == "True")
-    print "dprime: " + str(myargs.dprime)
+    print("dprime: " + str(myargs.dprime))
 
     # Column settings
     myargs.chr = str(request.args.get('columns[chromosome]'))
     myargs.bp = str(request.args.get('columns[position]'))
     myargs.pval = str(request.args.get('columns[pvalue]'))
 
-    print "myargs:"
-    print type(myargs.chr)
+    print("myargs:")
+    print(type(myargs.chr))
     # regionValues = json.loads(request.args.get('region'))
     # variantValues = json.loads(request.args.get('variant'))
     # columns = json.loads(request.args.get('columns'))
@@ -549,17 +549,17 @@
         app.config['UPLOAD_DIR'], str(request.args.get('filename')))
     # filename = "/local/content/ldlink/data/assoc/meta_assoc.meta"
 
-    print 'filename: ' + filename
-    print 'region: ' + region
-    print 'pop: ' + pop
-    print 'reference: ' + reference
-    print 'region: ' + region
+    print('filename: ' + filename)
+    print('region: ' + region)
+    print('pop: ' + pop)
+    print('reference: ' + reference)
+    print('region: ' + region)
 
     if region == "variant":
-        print "Region is variant"
-        print "index: " + str(request.args.get('variant[index]'))
-        print "base pair window: " + request.args.get('variant[basepair]')
-        print
+        print("Region is variant")
+        print("index: " + str(request.args.get('variant[index]')))
+        print("base pair window: " + request.args.get('variant[basepair]'))
+        print()
         myargs.window = int(request.args.get('variant[basepair]'))
 
         if request.args.get('variant[index]') == "":
@@ -568,7 +568,7 @@
             myargs.origin = request.args.get('variant[index]')
 
     if region == "gene":
-        print "Region is gene"
+        print("Region is gene")
         if request.args.get('gene[index]') == "":
             myargs.origin = None
         else:
@@ -578,7 +578,7 @@
         myargs.window = int(request.args.get('gene[basepair]'))
 
     if region == "region":
-        print "Region is region"
+        print("Region is region")
         if request.args.get('region[index]') == "":
             myargs.origin = None
         else:
@@ -593,8 +593,8 @@
         return sendTraceback()
 
     # copy_output_files(reference)
-    print "out_json:"
-    print out_json
+    print("out_json:")
+    print(out_json)
 
     return sendJSON(out_json)
 
